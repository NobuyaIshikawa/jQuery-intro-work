jQuery01_ボタンと連動してテキストを変える

・大前提となる記述ルール

$("要素").～
id="sample"なら$("#sample").～、class="sample"なら$(".sample").～、<div>なら$("div").～

ここで指定した要素全てに対してアクションを起こします。

例として、要素内のテキストを書き換える処理ならば、
$("要素名").text("代替テキスト");

といった具合です。当然ですが、上記の通りに書いただけではページを開いた直後に代替テキストになってしまいます。

今回の勉強会では、「クリックしたら～する」という動作を多用します。
jQueryのルールで記述すると以下の通り。

例１：<button>がクリックされたら<div>内を代替テキストに書き換え

$("button").click(function(){
	$("div").text("代替テキスト");
});

例２：<button>がクリックされたらそのボタンのテキストを代替テキストに書き換え

$("button").click(function(){
	$(this).text("代替テキスト");
});

$("要素").click(function(){
	～処理内容～
});

$("要素").click(function(){
	～処理内容～
});

これは今回の勉強会を通して使用する要です。
勿論、クリック以外にも条件となる動作の指定はできます。興味を持った方は調べてみてください。

また、今回は.text()で指定要素のテキストを書き換える処理を問題としていますが、他にも様々あります。

prepend() //指定要素内部の先頭に追加
append() //指定要素内部の最後に追加

before() //指定要素の前に追加
after() //指定要素の後に追加

clone() //指定要素を別な要素にコピー

remove() //指定要素を削除

例：<div></div>内に<ul><li>リスト</li></ul>を追加
$("div").append("<ul><li>リスト</li></ul>");


・要素の親兄弟を選択

下記の様な構成だったとして、一番下の階層にテキストを加えたい…

<div>
	<div class="mine">
		<div>

		</div>
	</div>
	<div>

	</div>
</div>

$("div").text("～");と指定してしまうと全ての<div>を対象としてしまいます。

そこで使うのが親兄弟の指定

parent() //対象の親要素(一つ上の階層)を指定
siblings() //対象の兄弟要素(同階層)を指定
children() //対象の子要素(一つ下の階層)を指定

今回は$(".mine")を主軸に考えて、
$(".mine").children().text("～");と指定すれば最下層のみを対象にできます。

他にも様々な指定方法もあり、

next() //対象の次の兄弟要素を指定
prev() //対象の前の兄弟要素を指定

を使えば複数兄弟要素があっても指定要素の移動が可能です。

また、以下の様に条件を指定することもできます。オプションと考えていただければわかりやすいかと思います。

:first //指定要素の中で最初のものを対象とする
:first-child //指定要素の最初の子要素を対象とする
:last //指定要素の中で最後のものを対象とする
:last-child //指定要素の最後の子要素を対象とする

例：最後のdiv要素のみテキストを追加
$("div:last").text("～");


☆jQuery02_クローンの挙動を確認する、jQuery03_テーブルの行追加・削除

・ある要素をそのまま複製したい時は.clone()

例：最初<p></p>の要素を最後の<div></div>にコピー
$("p:first").clone().appendTo("div:last"); or $("p").clone().prependTo("div");
*.appendTo()・・・()に指定した要素内の最後に追加
*.prependTo()・・・()に指定した要素内の先頭に追加

例：最初<p></p>の要素を最後の<div></div>にコピー
$("p:first").clone().appendTo("div:last"); or $("p").clone().prependTo("div");


☆jQuery04_シンプルなライツアウトを作る

ライツアウトは5×5マスの計25マスに配置された要素に対して処理を行います。そのため、クリックされた場所がどこなのか、処理の対象はどれなのかを把握するために、以下の処理を使います。

・index() //対象の要素の番号を取得

例：ページ内で何番目に出てきた<button>なのか、クリックしたらその番号を取得
$("button").click(function(){
	$("button").index(this);
});


・eq() //対象要素の中でも要素番号を特定したものを対象とする *番号が0から始まることに注意

例：3番目の<button>をクリックする
$("button").eq(2).click();


・prop() //状態を確認したり変更する場合に用います

prop("disabled", true) //指定要素の状態を変更
例：全ての<button>を利用不可にする
$("button").prop("disabled", true);

例で挙げた"disabled"の他、チェックボックスであれば"checked"でチェックの確認、変更ができます。


・条件分岐if文
if(条件){
	// 条件を満たす場合はこちらの処理を行う
}

上記の場合は条件を満たす場合のみ処理が行われます。条件に応じて処理を変える場合は、

if(条件){
	// 条件を満たす場合はこちらの処理を行う
}else{
	// 条件を満たさない場合はこちらの処理を行う
}

と記述します。

※条件分岐で、「利用不可の場合」のみ処理を実行
例：ボタンが使用不可のとき、～する
if($("button").prop("disabled")){
	～処理内容～
}

・存在の判定
今回は問題を早く解いた人向けにクリアしたかどうかを判定する問題を用意しています。そのとき必要となるのが一つでもチェックボックスがチェックされているかどうかです。
$().size()を使うと、そのときに条件を満たす要素がいくつあるかを判別できます。

例：使用不可のボタンが一つ以上あるとき、～する
if(0 < $("button:disabled").size()){
	～処理内容～
}

・ランダムに数値を取得する方法
「ランダム」ボタンで初期配置をランダムに変更する問題では、乱数を取得するという処理が必要になります。
以下はそのヒントです。

例：変数 r に0から1の数値をランダムに入れる
var r = Math.random();

例：変数 r の小数点を切り上げ/切り捨て/四捨五入
r = Math.ceil(r);
r = Math.floor(r);
r = Math.round(r);

☆jQuery05_D3.jsでライツアウトを装飾する

チェックボックスのON/OFFだと見た目が寂しいと思われる方もいらっしゃるのではないでしょうか。
ここでは先ほど作成したライツアウトにD3.jsで一工夫します。

今回はD3.jsでライツアウトを装飾するだけですが、D3.jsはグラフ作成など様々に活用されています。
公式ページ http://d3js.org

今回の勉強会や公式ページでD3.jsに興味を持った方は、是非次回のIPStudyにご参加ください。